/*
 * This file is generated by jOOQ.
 */
package pl.klasicki.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.klasicki.jooq.Budget;
import pl.klasicki.jooq.Keys;
import pl.klasicki.jooq.tables.records.ExpenseRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expense extends TableImpl<ExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>budget.expense</code>
     */
    public static final Expense EXPENSE = new Expense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpenseRecord> getRecordType() {
        return ExpenseRecord.class;
    }

    /**
     * The column <code>budget.expense.id</code>.
     */
    public final TableField<ExpenseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<ExpenseRecord, Object> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"money\"").nullable(false), this, "");

    /**
     * The column <code>budget.expense.date</code>.
     */
    public final TableField<ExpenseRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>budget.expense.category</code>.
     */
    public final TableField<ExpenseRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Expense(Name alias, Table<ExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Expense(Name alias, Table<ExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>budget.expense</code> table reference
     */
    public Expense(String alias) {
        this(DSL.name(alias), EXPENSE);
    }

    /**
     * Create an aliased <code>budget.expense</code> table reference
     */
    public Expense(Name alias) {
        this(alias, EXPENSE);
    }

    /**
     * Create a <code>budget.expense</code> table reference
     */
    public Expense() {
        this(DSL.name("expense"), null);
    }

    public <O extends Record> Expense(Table<O> child, ForeignKey<O, ExpenseRecord> key) {
        super(child, key, EXPENSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Budget.BUDGET;
    }

    @Override
    public UniqueKey<ExpenseRecord> getPrimaryKey() {
        return Keys.EXPENSE_PKEY;
    }

    @Override
    public Expense as(String alias) {
        return new Expense(DSL.name(alias), this);
    }

    @Override
    public Expense as(Name alias) {
        return new Expense(alias, this);
    }

    @Override
    public Expense as(Table<?> alias) {
        return new Expense(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(String name) {
        return new Expense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(Name name) {
        return new Expense(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(Table<?> name) {
        return new Expense(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Object, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super Object, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super Object, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
